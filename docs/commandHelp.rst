.. _command_reference:

.. This document is autogenerated by CommandList.reStructuredTextHelp().
   Do not edit it here. Edit source code then run tests in CommandListTest.updateReStructuredFile() to recreate this file.

Command reference
=================

This is the documentation for the indvidual commands. The help documented here can be invoked also at the command prompt with `command -h`, for example to get the help for `ylim`::

    ylim -h

Parameters in square brakets are optional and the default argument is indicated by the `=` sign. The syntax `...` indicate that the argument can be repeated multiple times. For example::

    ylim min max [track_regex = .*]...

Means that `ylim` takes two mandatory arguments, `min` and `max`. The optional argument, `track_regex`, defaults to `.*` and can be repated multiple times.


Navigation
----------

goto
++++

:code:`goto chrom:[from]-[to]`

Go to region `chrom:from-to` or to `chrom:from` or to the start of `chrom`.  The character ':' is a shortcut for `goto`. Examples::

    goto chr8:1-1000  ## Go to interval 1-1000 on chr8
    goto chr8:10      ## Go to position 10 on chr8
    goto chr8         ## Go to start of chr8

Or the same with::

    :chr8:1-1000 
    :chr8:10 
    :chr8


INT
+++

:code:`INT [INT]`

Go to position `INT` or to region `INT INT` on current chromosome.  Allowed is the hyphenated format  separating the two positions. If a list of integers is given, the first and last are taken as *from* and *to*. This is handy to copy and paste intervals from the ruler above the prompt. 
Examples::

    10                   -> Will jump to position 10 
    10 1000              -> Go to region 10-1000 
    10-1000              -> Same as above
    10 250 500 750 1000  -> Same as above again



plus +
++++++

:code:`+ INT [k|m]`

Move forward by `INT` bases. Suffix K/M recognized.  Suffixes k (kilo) and M (mega) are expanded to x1000 and x1,000,000. Examples::

    +2m
    +10k
    +10.5k



minus -
+++++++

:code:`- INT [k|m]`

Move backwards by INT bases. Suffix K/M recognized.  Suffixes k (kilo) and M (mega) are expanded to x1000 and x1,000,000.
Examples::

    -100
    -10k
    -10.5m



f - forward
+++++++++++

:code:`f [NUM=0.1]`

Move forward NUM times the size of the current window, 1/10 by default. 

b - backward
++++++++++++

:code:`b [NUM=0.1]`

Move backward NUM times the size of the current window, 1/10 by default 

ff
++

:code:`ff`

Move forward by 1/2 of a window. A shortcut for `f 0.5` 

bb
++

:code:`bb`

Move backward by 1/2 of a window. A shortcut for `b 0.5` 

zi
++

:code:`zi [INT = 1]`

Zoom in INT times. Each zoom halves the window size.  To zoom quickly use INT= 5 or 10 e.g. `zi 10`

zo
++

:code:`zo [INT = 1]`

Zoom out INT times. Each zoom doubles the window size.  To zoom quickly use INT= 5 or 10 e.g. `zo 10`

extend
++++++

:code:`extend [mid|window] [INT left] [INT right]`

Extend the current window by `INT` bases left and right.
 
* :code:`window` (default): Extend the current window left and right by `INT` bases

* :code:`mid`: The new window is given by the midpoint of the current window plus and minus `INT` bases left and right.

If only one INT is given it is applied to both left and right. Negative INTs will shrink instead of extend the window.

l - left
++++++++

:code:`l`

Go to the Left half of the current window.  Alternate the left and right command to quickly focus on a point of interest. 

r - right
+++++++++

:code:`r`

Go to the Right half of the current window.  Alternate the left and right command to quickly focus on a point of interest. 

p
+

:code:`p`

Go to the previous visited position.  Similar to the back and forward arrows of an Internet browser.

n
+

:code:`n`

Go to the next visited position.  Similar to the back and forward arrows of an Internet browser.

next
++++

:code:`next [-back] [-start] [track]`

Move to the next feature not overlapping the current coordinates.  By default `next` centers the window on the next feature and zooms out.

* :code:`-back`: Search backwards. I.e. move to next feature on the left of the current position.

* :code:`-start`: Sets the window right at the start of the feature, without centering and zooming out.

* :code:`track`: Track to search for next feature. Default to the first annotation track found.

`next` starts searching immediately after the current window and loops thourgh each chromosome until a feature is found.

Find
----

find
++++

:code:`find [-all] regex [track]`

Find the first record in `track` containing `regex`. The search for `regex` starts from the *end* of the current window (so the current window is not searched) and moves forward on the current chromosome. At the end  of the current chromosome move to the next chromosomes and then restart at  the start of the initial one. The search stops at the first match found. If `track` is omitted the first interval track found is searched.
The :code:`-all` flag will return the region containing **all** the regex matches.
Examples::

    find -all ACTB genes.gtf -> Find all the matches of ACTB
    find 'ACTB gene'         -> Find the first match of 'ACTB gene'

Use single quotes to define patterns containing spaces.

seqRegex
++++++++

:code:`seqRegex [-iupac] [-c] [regex]`

Find regex in reference sequence and show matches as an additional track.  Options:

* :code:`regex`: Regex to search. If missing the seq regex track is removed.

* :code:`-iupac`: Enable the interpretation of the IUPAC ambiguity code. NB: This option simply converts IUPAC chracters to the corresponding regex.

* :code:`-c`: Enable case-sensitive matching. Default is to ignore case.

Examples::

    seqRegex ACTG        -> Case insensitive, actg matched
    seqRegex -c ACTG     -> Case sensitive, will not match actg
    seqRegex -iupac ARYG -> Interpret (converts) R as [AG] and Y as [CT]
    seqRegex             -> Disable regex matching track

To save matches to file, see the `print` command. This command is ignored if the reference fasta sequence is missing.

bookmark
++++++++

:code:`bookmark [name] | [-rm] | [-print] | [> [file]]`

Creates a track to save positions of interest. Without arguments, add the current position to the bookmark track. Options:

* :code:`name`: give this name to the new bookmark.

* :code:`-rm`: remove the bookmark matching *exactly* the current position.

* :code:`-print`: prints to screen the list of current bookmarks.

* :code:`>`: saves the bookmark track to file.

Examples::

    bookmark              -> Add the current position to bookmarks.
    bookmark myGene       -> Add the current position with name myGene
    bookmark -rm          -> Remove the bookmark exactly in this position
    bookmark > books.txt  -> Save to file books.txt
    bookmark -print       -> Show table of bookmarks



Display
-------

grep
++++

:code:`grep [-i = .*] [-e = ''] [track_regex = .*]...`

Similar to grep command, filter for features including or excluding patterns. Options:

* :code:`-i regex`:  Show features matching this regex.

* :code:`-e regex`: Exclude features matching this regex.

* :code:`track_regex`: Apply to tracks matched by `track_regex`.

*NOTES*

* For case insensitive matching prepend :code:`(?i)` to regex pattern. E.g. :code:`-i (?i)ACTB` to match also Actb

* Use *single quotes* to delimit patterns containing spaces e.g. :code:`-i 'ACTB gene'`

Regex `-i` and `-e` are applied to the raw lines as read from source file and it is applied only to annotation tracks (GFF, BED, VCF, etc). For example::

    grep -i RNA -e mRNA gtf gff

Will show the rows containing 'RNA' but will hide those containing 'mRNA', applies to tracks whose name matches 'gtf' or 'gff'.
With no arguments reset to default: :code:`grep -i .* -e ^$ .*` which means show everything, hide nothing, apply to all tracks.

featureDisplayMode
++++++++++++++++++

:code:`featureDisplayMode [-expanded | -collapsed | -oneline] [track_regex = .*]...`

Set how annotation features should be displayed.
 
* :code:`-expanded/-e` Put overalpping features on different lines (default).

* :code:`-collapsed/-c` Merge features with overlapping genomic coordinates.

* :code:`-oneline/-o` Merge features overlapping on screen coordinates. This option makes the track occupy only one line.

* :code:`track_regex` List of regexes to select tracks. Default: .* (all tracks).

Without arguments toggle between expanded and collapsed mode. 

gap
+++

:code:`gap [-on | -off] [track_regex = .*]...`

Display features with or without a separating gap.  With :code:`gap -on` (default) features which on screen do not have at least one space separating them are moved to different lines. In this way it is clear where one feature starts and ends. If gap is unset (:code:`gap -off`) features are shown more packed. 
Example with :code:`gap -on`::

    ||||||
          ||||||

With :code:`gap -off` these two features look like::

    ||||||||||||

As elsewhere, this command is applied to all tracks captured by the list of regexes.

gffNameAttr
+++++++++++

:code:`gffNameAttr [attribute_name = NULL | -na] [track_regex = .*]...`

GTF/GFF attribute to set the feature name or `-na` to suppress name.  Use attribute NULL to reset to default choice of attribute. To suppress printing of the name use `-na`. Bed features get their name from the 4th column. Applies to annotation tracks captured by the list `track_regex`. Example, given the gtf feature::

    chr1 . CDS  10 99 . + 2 gene_id "PTGFRN"; transcript_id "NM_020440";

Use gene_name as feature name or transcript_id::

    gffNameAttr gene_name genes.gtf .*gff
    PTGFRN_CCCCCCCCC
    
    gffNameAttr transcript_id genes.gtf .*gff
    NM_020440_CCCCCC
    
    gffNameAttr -na
    CCCCCCCCCCCCCCCC <- Do not show name    



trackHeight
+++++++++++

:code:`trackHeight INT [track_regex = .*]...`

Set track height to INT lines of text for all tracks matching regexes.  Setting height to zero hides the track and skips the processing altogether. This is useful to speed up the browsing when large bam files are present. Use infoTrack to see which tracks are hidden. Example::

    trackHeight 5 aln.*bam gtf`


ylim
++++

:code:`ylim <NUM|min|na> <NUM|min|na> [track_regex = .*]...`

Set the y-axis limit for all tracks matched by regexes. The first two arguments set the min and max limits. The 3rd argument is a list of regexes to capture the tracks to reset. Argument min and max can be:

* :code:`NUM`: Numeric, fix the limits exactly to these values

* :code:`na`: Scale tracks to their individual min and/or max

* :code:`min` and :code:`max`: Set to the min and max of **all** tracks.

This command applies only to tracks displaying quantitative data on y-axis (e.g. bigwig, tdf), the other tracks are unaffected. Examples::

    ylim 0 50      -> Set min= 0 and max= 50 in all tracks.
    ylim 0 na      -> Set min to 0 and autoscale the max. Apply to all tracks
    ylim na na tdf -> Autoscale min and max. Apply to all tracks matching 'tdf'
    ylim min max   -> Set to the min and max of all tracks



colorTrack
++++++++++

:code:`colorTrack color [track_regex = .*]...`

Set colour for tracks matched by regex.  Available colours: red, green, yellow, blue, magenta, cyan, grey, light_red, light_green, light_yellow, light_blue, light_magenta, light_cyan, light_grey, white, black, default. The 'default' colour reset to the system default colour. Colouring is rendered with ANSI codes 8/16. Example::

    colorTrack light_blue ts.*gtf ts.*bam



hideTitle
+++++++++

:code:`hideTitle [-on | -off] [track_regex = .*]...`

Set the display of the title line matched by track_regex.  Without argument -on or -off toggle between the two modes for all tracks matched by the list of regexes.

editNames
+++++++++

:code:`editNames -t <pattern> <replacement> [track_re=.*]...`

Edit track names by substituting regex pattern with replacement. Pattern and replacement are required arguments, the default regex for track is '.*' (i.e. all tracks).
The :code:`-t` (test) flag shows what renaming would be done without actually editing the names.
Use "" (empty double quotes) to replace pattern with nothing. Examples: Given track names 'fk123_hela.bam#1' and 'fk123_hela.bed#2'::

    editNames fk123_ ""       -> hela.bam#1, hela.bed#2
    editNames fk123_ "" bam   -> hela.bam#1, fk123_hela.bed#2
    editNames _ ' '           -> fk123 hela.bam#1,  fk123 hela.bed#2
    editNames ^.*# cells      -> cells#1, cells#2
    editNames ^ xx_           -> xx_fk123_hela.bam#1, xx_fk123_hela.bed#2 (add prefix)


dataCol
+++++++

:code:`dataCol [index = 4] [track_regex = .*]...`

Select data column for bedgraph tracks containing regex.  First column has index 1. This command applies only to tracks of type bedgraph.
For example, use column 5 on tracks containing #1 and #3::
 
    dataCol 5 #1 #3



print
+++++

:code:`print [-n INT] [-full] [-off] [track_regex = .*]... [>|>> file]`

Print lines for the tracks matched by `track_regex`.  Useful to show exactly what features are present in the current window. Features are filtered in/out according to the :code:`grep` command. Options:

* :code:`track_regex`: Apply to tracks matched by one or more of these regexes.

* :code:`-n INT=10`: Print up to this many lines, default 10. No limit if < 0.

* :code:`-clip`: Clip lines longer than the screen width. This is the default.

* :code:`-full`: Wrap lines longer than the screen width.

* :code:`-off`: Turn off printing.

* :code:`>` and :code:`>>`: Write output to `file`. `>` overwrites and `>>` appends to existing file. The %r variable in the filename is expanded to the current genomic coordinates. Writing to file overrides options -n and -off, lines are written in full without limit.

Examples::

    print                        -> Print all tracks, same as `print .*`
    print -off                   -> Turn off printing for all tracks
    print genes.bed >> genes.txt -> Append features in track(s) 'genes.bed' to file

Currently `print` applies only to annotation tracks, other tracks are unaffected. Without options toggle tracks between OFF and CLIP mode.

Alignments
----------

rpm
+++

:code:`rpm [-on | -off] [track_regex = .*]`

Set display to reads per million for BAM and TDF files.
 
* :code:`-on | -off` Set mode on/off. Without arguments toggle between on and off.

* :code:`track_regex` List of regexes to capture target tracks.

samtools
++++++++

:code:`samtools [-f INT=0] [-F INT=4] [-q INT=0] [track_re = .*] ...`

Apply samtools filters to alignment tracks captured by the list of track regexes. As *samtools view*, this command filters alignment records on the basis of the given flags:

* :code:`-F`: Filter out flags with these bits set. NB: 4 is always set.

* :code:`-f`: Require alignment to have these bits sets.

* :code:`-q`: Require alignments to have MAPQ >= than this.

Examples::

    samtools -q 10           -> Set mapq for all tracks. -f and -F reset to default
    samtools -F 1024 foo bar -> Set -F for all track containing re foo or bar
    samtools                 -> Reset all to default.


BSseq
+++++

:code:`BSseq [-on | -off] [track_regex = .*]...`

Set bisulfite mode for read tracks matched by regex. In bisulfite mode, the characters M and m mark methylated bases (i.e. unconverted C to T) and U and u are used for unmethylated bases (i.e. C converted to T). Upper case is used for reads on  forward strand, small case for reverse.

* :code:`-on | -off` Set mode. Without arguments toggle between on and off.

* :code:`track_regex` List of regexes to capture target tracks.

Ignored without reference fasta sequence.

General
-------

setGenome
+++++++++

:code:`setGenome fasta|bam|genome`

Set genome and reference sequence. The genome, i.e. the list of contig and names and sizes, can be extracted from the fasta reference, from a bam file or from a genome identifier (e.g. hg19). If a fasta file is used also the reference sequence becomes available.

showGenome
++++++++++

:code:`showGenome`

Print the genome dictionary with a representation of chromosome sizes.  Example output::

    showGenome
    chrM  16571
	   chr1  249250621 ||||||||||||||||||||||||||||||
    chr2  243199373 |||||||||||||||||||||||||||||
    ...
    chr21 48129895  ||||||
    chr22 51304566  ||||||
    chrX  155270560 |||||||||||||||||||
    chrY  59373566  |||||||



infoTracks
++++++++++

:code:`infoTracks`

Print the name of the current tracks along with file name and format.  Hidden tracks are marked by an asterisk.

recentlyOpened
++++++++++++++

:code:`recentlyOpened`

List recently opened files.  

addTracks
+++++++++

:code:`addTracks [file or URL]...`

Add tracks from local or remote files.  For local files, glob characters (wildcard) are expanded as in Bash (but note that currently globs in directory names are not expanded.)
Examples::

    addTracks peaks.bed genes.*.gtf
    addTracks http://remote/host/peaks.bed


dropTracks
++++++++++

:code:`dropTracks [-t] track_regex [track_regex]...`

Drop tracks matching any of the listed regexes. The :code:`-t` (test) flag only shows what tarcks would be removed without actually removing them.
Examples::

    dropTracks bam


orderTracks
+++++++++++

:code:`orderTracks [track_regex]...`

Reorder tracks according to the list of regexes or sort by name. Not all the tracks need to be listed, the missing ones follow the listed ones in unchanged order. Without arguments sort track by tag name.
For example, given the track list: `[hela.bam#1, hela.bed#2, hek.bam#3, hek.bed#4]`::

    orderTracks #2 #1   -> [hela.bed#2, hela.bam#1, hek.bam#3, hek.bed#4]
    orderTracks bam bed -> [hela.bam#1, hek.bam#3, hela.bed#2, hek.bed#4]
    orderTracks         -> name sort [hela.bam#1, hela.bed#2, hek.bam#3, hek.bed#4]


posHistory
++++++++++

:code:`posHistory`

List the visited positions. 

history
+++++++

:code:`history`

List the executed commands.  Also listed are the commands executed in previous runs of ASCIIGenome. Previous commands are in \ /.asciigenome_history

save
++++

:code:`save [>>] [filename = chrom_start_end.txt']`

Save screenshot to file as text or pdf format. The default file name is generated from the current coordinates and the default format is plain text. If the file name has extension '.pdf' then save as pdf. To append to an existing file use :code:`>>`. The string :code:`%r` in the file name is replaced with the current coordinates. Examples::

    save mygene.txt    -> Save to mygene.txt as text
    save >> mygene.txt -> Append to mygene.txt
    save               -> Save to chrom_start-end.txt as text
    save .pdf          -> Save to chrom_start-end.pdf as pdf
    save mygene.%r.pdf -> Save to mygene.chr1_100-200.pdf as pdf



sessionSave
+++++++++++

:code:`sessionSave filename`

Experimental: Save the current settings to file suitable to be reloaded by ASCIIGenome. `sessionSave` writes to file a set of commands to reproduce the current settings: tracks, colors, heights etc. It's not meant to be a perfect replica, rather it's a shortcut to avoid re-typing commands. Example::

    sessionSave session.txt

Quit session and reload with::

    ASCIIGenome -x session.txt


q
+

:code:`q`

Quit 

h
+

:code:`h -h`

h and -h show this help.
For help on commands: `command -h`, e.g. :code:`ylim -h` 


